System.register(['angular2/angular2', '../position'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var angular2_1, angular2_2, position_1;
    var TooltipOptions, TooltipContainer, Tooltip, tooltip;
    return {
        setters:[
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
                angular2_2 = angular2_1_1;
            },
            function (position_1_1) {
                position_1 = position_1_1;
            }],
        execute: function() {
            TooltipOptions = (function () {
                function TooltipOptions(options) {
                    Object.assign(this, options);
                }
                return TooltipOptions;
            })();
            TooltipContainer = (function () {
                function TooltipContainer(element, options) {
                    this.element = element;
                    Object.assign(this, options);
                    this.classMap = { 'in': false };
                    this.classMap[options.placement] = true;
                }
                TooltipContainer.prototype.position = function (hostEl) {
                    this.display = 'block';
                    this.top = '0px';
                    this.left = '0px';
                    var p = position_1.positionService
                        .positionElements(hostEl.nativeElement, this.element.nativeElement.children[0], this.placement, this.appendToBody);
                    this.top = p.top + 'px';
                    this.left = p.left + 'px';
                    this.classMap['in'] = true;
                };
                TooltipContainer = __decorate([
                    angular2_1.Component({
                        selector: 'tooltip-container'
                    }),
                    angular2_1.View({
                        template: "\n    <div class=\"tooltip\" role=\"tooltip\"\n     [ng-style]=\"{top: top, left: left, display: display}\"\n     [ng-class]=\"classMap\" >\n      <div class=\"tooltip-arrow\"></div>\n      <div class=\"tooltip-inner\">\n        {{content}}\n      </div>\n    </div>",
                        directives: [angular2_1.NgClass, angular2_1.NgStyle],
                        encapsulation: angular2_1.ViewEncapsulation.None
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof angular2_1.ElementRef !== 'undefined' && angular2_1.ElementRef) === 'function' && _a) || Object, TooltipOptions])
                ], TooltipContainer);
                return TooltipContainer;
                var _a;
            })();
            Tooltip = (function () {
                function Tooltip(element, loader) {
                    this.element = element;
                    this.loader = loader;
                    this.visible = false;
                    this.placement = 'top';
                }
                Tooltip.prototype.onInit = function () {
                };
                // todo: filter triggers
                // params: event, target
                Tooltip.prototype.show = function () {
                    var _this = this;
                    if (this.visible) {
                        return;
                    }
                    this.visible = true;
                    var options = new TooltipOptions({
                        content: this.content,
                        placement: this.placement
                    });
                    var binding = angular2_2.Injector.resolve([
                        angular2_2.bind(TooltipOptions).toValue(options)
                    ]);
                    this.tooltip = this.loader
                        .loadNextToLocation(TooltipContainer, this.element, binding)
                        .then(function (componentRef) {
                        componentRef.instance.position(_this.element);
                        return componentRef;
                    });
                };
                // params event, target
                Tooltip.prototype.hide = function () {
                    if (!this.visible) {
                        return;
                    }
                    this.visible = false;
                    this.tooltip.then(function (componentRef) {
                        componentRef.dispose();
                        return componentRef;
                    });
                };
                Tooltip = __decorate([
                    angular2_1.Directive({
                        selector: '[tooltip]',
                        properties: [
                            'content:tooltip',
                            'placement:tooltip-placement',
                            'appendToBody',
                            'isOpen: tooltip-is-open',
                            'enable: tooltip-enable'
                        ],
                        host: {
                            '(mouseenter)': 'show($event, $targe)',
                            '(mouseleave)': 'hide($event, $targe)',
                            '(focusin)': 'show($event, $targe)',
                            '(focusout)': 'hide($event, $targe)'
                        }
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof angular2_1.ElementRef !== 'undefined' && angular2_1.ElementRef) === 'function' && _a) || Object, (typeof (_b = typeof angular2_1.DynamicComponentLoader !== 'undefined' && angular2_1.DynamicComponentLoader) === 'function' && _b) || Object])
                ], Tooltip);
                return Tooltip;
                var _a, _b;
            })();
            exports_1("Tooltip", Tooltip);
            exports_1("tooltip", tooltip = [Tooltip, TooltipContainer]);
        }
    }
});
//# sourceMappingURL=tooltip.js.map