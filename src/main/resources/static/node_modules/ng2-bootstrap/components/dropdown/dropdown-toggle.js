System.register(['angular2/angular2', './dropdown'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var angular2_1, dropdown_1;
    var DropdownToggle;
    return {
        setters:[
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
            },
            function (dropdown_1_1) {
                dropdown_1 = dropdown_1_1;
            }],
        execute: function() {
            DropdownToggle = (function () {
                function DropdownToggle(dropdown, el) {
                    this.dropdown = dropdown;
                    this.el = el;
                    this.disabled = false;
                }
                DropdownToggle.prototype.onInit = function () {
                    this.dropdown.dropDownToggle = this;
                };
                Object.defineProperty(DropdownToggle.prototype, "isOpen", {
                    get: function () {
                        return this.dropdown.isOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                DropdownToggle.prototype.toggleDropdown = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    if (!this.disabled) {
                        this.dropdown.toggle();
                    }
                };
                DropdownToggle = __decorate([
                    angular2_1.Directive({
                        selector: '[dropdown-toggle]',
                        properties: ['disabled'],
                        host: {
                            '(click)': 'toggleDropdown($event)',
                            '[class.dropdown-toggle]': 'true',
                            '[class.disabled]': 'disabled',
                            '[attr.aria-haspopup]': 'true',
                            '[attr.aria-expanded]': 'isOpen'
                        }
                    }),
                    __param(0, angular2_1.Host()), 
                    __metadata('design:paramtypes', [dropdown_1.Dropdown, (typeof (_a = typeof angular2_1.ElementRef !== 'undefined' && angular2_1.ElementRef) === 'function' && _a) || Object])
                ], DropdownToggle);
                return DropdownToggle;
                var _a;
            })();
            exports_1("DropdownToggle", DropdownToggle);
        }
    }
});
//# sourceMappingURL=dropdown-toggle.js.map