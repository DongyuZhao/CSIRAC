System.register(['angular2/angular2', '../common'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var angular2_1, common_1;
    var Tabset, Tab, TabHeading, tabs;
    return {
        setters:[
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            }],
        execute: function() {
            // todo: add active event to tab
            // todo: fix? mixing static and dynamic tabs position tabs in order of creation
            Tabset = (function () {
                function Tabset() {
                    this.tabs = [];
                }
                Object.defineProperty(Tabset.prototype, "classMap", {
                    get: function () {
                        var map = {
                            'nav-stacked': this.vertical,
                            'nav-justified': this.justified
                        };
                        map['nav-' + (this.type || 'tabs')] = true;
                        return map;
                    },
                    enumerable: true,
                    configurable: true
                });
                Tabset.prototype.onInit = function () {
                    this.type = this.type !== 'undefined' ? this.type : 'tabs';
                };
                Tabset.prototype.addTab = function (tab) {
                    this.tabs.push(tab);
                    tab.active = this.tabs.length === 1 && tab.active !== false;
                };
                Tabset.prototype.removeTab = function (tab) {
                    var index = this.tabs.indexOf(tab);
                    if (index === -1) {
                        return;
                    }
                    // Select a new tab if the tab to be removed is selected and not destroyed
                    if (tab.active && this.tabs.length > 1) {
                        // If this is the last tab, select the previous tab. else, the next tab.
                        var newActiveIndex = index === this.tabs.length - 1 ? index - 1 : index + 1;
                        this.tabs[newActiveIndex].active = true;
                    }
                    this.tabs.slice(index, 1);
                };
                Tabset = __decorate([
                    angular2_1.Component({
                        selector: 'tabset',
                        properties: ['vertical', 'justified', 'type']
                    }),
                    angular2_1.View({
                        template: "\n    <ul class=\"nav\" [ng-class]=\"classMap\" (click)=\"$event.preventDefault()\">\n        <li *ng-for=\"#tabz of tabs\" class=\"nav-item\" [ng-class]=\"{active: tabz.active, disabled: tabz.disabled}\">\n          <a href class=\"nav-link\" [ng-class]=\"{active: tabz.active, disabled: tabz.disabled}\" (click)=\"tabz.active = true\">\n            <span [ng-transclude]=\"tabz.headingRef\">{{tabz.heading}}</span>\n          </a>\n        </li>\n    </ul>\n    <div class=\"tab-content\">\n      <ng-content></ng-content>\n    </div>\n  ",
                        directives: [angular2_1.CORE_DIRECTIVES, angular2_1.NgClass, common_1.NgTransclude]
                    }), 
                    __metadata('design:paramtypes', [])
                ], Tabset);
                return Tabset;
            })();
            exports_1("Tabset", Tabset);
            // TODO: templateUrl?
            Tab = (function () {
                function Tab(tabset) {
                    this.tabset = tabset;
                    this.select = new angular2_1.EventEmitter();
                    this.deselect = new angular2_1.EventEmitter();
                    this.tabset.addTab(this);
                }
                Object.defineProperty(Tab.prototype, "disable", {
                    /** DEPRECATE disable */
                    get: function () {
                        return this.disabled;
                    },
                    set: function (v) {
                        console.warn('DEPRECATED use `disabled` property (not `disable`)');
                        this.disabled = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tab.prototype, "active", {
                    /** tab active state toogle */
                    get: function () {
                        return this._active;
                    },
                    set: function (active) {
                        var _this = this;
                        if (this.disabled && active || !active) {
                            if (!active) {
                                this._active = active;
                            }
                            this.deselect.next(this);
                            return;
                        }
                        this._active = active;
                        this.select.next(this);
                        this.tabset.tabs.forEach(function (tab) {
                            if (tab !== _this) {
                                tab.active = false;
                            }
                        });
                    },
                    enumerable: true,
                    configurable: true
                });
                Tab.prototype.doCheck = function () {
                    return true;
                };
                Tab.prototype.onInit = function () {
                };
                Tab.prototype.onDestroy = function () {
                    this.tabset.removeTab(this);
                };
                Tab = __decorate([
                    angular2_1.Directive({
                        selector: 'tab, [tab]',
                        properties: ['active', 'disable', 'disabled', 'heading'],
                        events: ['select', 'deselect'],
                        host: {
                            '[class.tab-pane]': 'true',
                            '[class.active]': 'active'
                        }
                    }), 
                    __metadata('design:paramtypes', [Tabset])
                ], Tab);
                return Tab;
            })();
            exports_1("Tab", Tab);
            TabHeading = (function () {
                function TabHeading(templateRef, tab) {
                    this.templateRef = templateRef;
                    tab.headingRef = templateRef;
                }
                TabHeading = __decorate([
                    angular2_1.Directive({ selector: '[tab-heading]' }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof angular2_1.TemplateRef !== 'undefined' && angular2_1.TemplateRef) === 'function' && _a) || Object, Tab])
                ], TabHeading);
                return TabHeading;
                var _a;
            })();
            exports_1("TabHeading", TabHeading);
            exports_1("tabs", tabs = [Tab, TabHeading, Tabset]);
        }
    }
});
//# sourceMappingURL=tabs.js.map